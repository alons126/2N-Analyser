TCanvas *c = new TCanvas("c1", "c2", 1000 * 1.25, 750 * 1.25); // normal res

c->cd()->SetGrid();
c->cd()->SetBottomMargin(0.14), c->cd()->SetLeftMargin(0.16), c->cd()->SetRightMargin(0.16), c->cd()->SetTopMargin(0.12);
c->cd();

TH1D *h = (TH1D *) _file0->Get("Multiplicity of FD neutrons by redef. APID&AV (nFDpCD, FD)");

h->Draw();

TH1D *hUpper = (TH1D *) h->Clone("hUpper");
hUpper->GetXaxis()->SetRangeUser(2,10);
TH1D *hUpperClone = (TH1D *) hUpper->Clone("hUpperClone");

TH1D *hLower = (TH1D *) h->Clone("hLower");
hLower->GetXaxis()->SetRangeUser(0,2);
TH1D *hLowerClone = (TH1D *) hLower->Clone("hLowerClone");

// Find bin numbers corresponding to x_min and x_max
int bin_min = h->FindBin(2);
int bin_max = h->FindBin(10);


double entries_in_range = 0;
for (int bin = bin_min; bin <= bin_max; ++bin) {
    entries_in_range += h->GetBinContent(bin);  // Sum the bin contents
}

double p = ((entries_in_range)/(h->Integral()))*100;
//double p = ((hUpper->Integral())/(h->Integral()))*100;

std::cout << "\n\nTotal number of events:\t" << h->GetEntries() << "\n";
std::cout << "Total number of events (upper):\t" << entries_in_range << "\n";
std::cout << "Total number of events (lower):\t" << h->GetEntries() - entries_in_range << "\n";
std::cout << "Upper percentage:\t" << p << "\n\n";

h->Draw();
c->SaveAs("01_reg.png");
c->Clear();

hUpperClone->Draw();
c->SaveAs("02_hUpper.png");
c->Clear();

hLowerClone->Draw();
c->SaveAs("03_hLower.png");
c->Clear();

.q

